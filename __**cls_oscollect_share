_______________________________________________________________________________________________________________
... pushes:
> gclean
> mvyml <-- before github command, but not gup command
> gs
> ga
> git commit -m "..."
> gup or github
> cpyml <-- after github, but not gup command
_______________________________________________________________________________________________________________
cls: this file is not in the git repo, so to back it up do:
> scp -r -P 22 __**cls_oscollect_share cleesmith@appsudo.com:/home/cleesmith/apps/oscollect
_______________________________________________________________________________________________________________

_______________________________________________________________________________________________________________
> cd oscollect_share
> rails s -p 8888
_______________________________________________________________________________________________________________
Fri Dec 7, 2012:
> mysql -u root -p mollydog
		CREATE DATABASE `oscollect_share` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
		GRANT ALL ON oscollect_share.* TO rails@'%' IDENTIFIED BY 'rails';

> cp ../osCollect/db/migrate/20120422112200_create_searches.rb db/migrate/
> cp ../osCollect/app/models/search.rb app/models/

> cp ../osCollect/db/migrate/20120422113101_create_search_fields.rb db/migrate/
> cp ../osCollect/app/models/search_field.rb app/models/

> cp ../osCollect/db/migrate/20120325182835_create_users.rb db/migrate/
> cp ../osCollect/app/models/user.rb app/models/
_______________________________________________________________________________________________________________
*************************  before deploy or github ************************************************************
_______________________________________________________________________________________________________________
(1)
... clean up tmp/, remove .DS_Store's, touch datetime of all files:
alias gclean="rm -rf tmp; mkdir tmp; find . -name '*.DS_Store' -type f -delete; find . -exec touch {} \;"
alias mvyml="mv config/*.yml __cls_config/"
alias cpyml="cp __cls_config/*.yml config/"

1. nano .gitignore ... then add the line: /__cls_config to keep my settings out of the github repo
2. use:
> gclean
> mvyml <-- before github command, but not gup command
> gs
> ga
> git commit -m "..."
> gup or github
> cpyml <-- after github, but not gup command

_______________________________________________________________________________________________________________
> cd oscollect_share
> bundle exec thin start -p 8888
_______________________________________________________________________________________________________________
... get stuff from oscollect_share: (see: app/controllers/searches_controller.rb in osCollect)
# tr = Typhoeus.get("localhost:8888/searches/1", followlocation: false, forbid_reuse: true)
# json_search = ActiveSupport::JSON.decode(tr.body)
# puts "\njson_search=#{json_search.inspect}\n"
# params[:search] = json_search
# puts "\nparams[:search]=#{params[:search].inspect}\n"
# asearch = Search.new(params[:search])
# asearch.user_id = current_user.id
# puts "\nasearch=#{asearch.inspect}\n"
# cls: put this in config/initializers/rabl_config.rb in oscollect_share:
#       Rabl.configure do |config|
#         config.include_json_root = false
#         config.include_child_root = false
#       end
#      ... seems to solve the issue with "accepts_nested_attributes_for :search_fields"
# asearch.serialize_into_sentinel_params
# asearch.save(validate: false)

_______________________________________________________________________________________________________________
Sharing alerts, searches, charts, dashboards, and reports:
[nope, not easy] - peer-to-peer osCollect servers sharing ... use existing tables and data
[yes] - central server
				- requires a copy of all tables and data
				- posting of shareables from each osCollect server

- share table for each osCollect installation:
	1. shared_id - i.e. search_id, chart_id, dashboard_id, report_id
	2. shareable_type - search/chart/dashboard/report
	3. shared_uuid - don't share the same thing twice, somehow?
			- see access_token + email below

A table for each shareable object(searches, alerts, charts, dashboards, reports) from osCollect with
the same schema, so creates/updates/deletes are the same as osCollect (except for user references).

Share:
- belongs_to user
- has_many searches, alerts, charts, dashboards, reports

Members:
1. 	IP/domain - during registration by admin
2.	access_token
		- not just for access, but to uniquely identify each osCollect web app that's sharing, i.e.
			a list of osCollect's allowed to share on the central sharing api server

Users:
- belongs_to member
- has_many shares
1. member_id - reference to Members table
2. email - uniquely identifies a user across all osCollect instances
3. oscollect_username
4. oscollect_user_id

in osCollect app:
- for each shareable object have a share/unshare button on it's listing page

_______________________________________________________________________________________________________________

